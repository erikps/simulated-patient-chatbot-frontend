import { React, Component } from "react";
import { TextMessage } from "./TextMessage";

// Parse the response (a JSON object) generated by the RASA chatbot and
// return a list of responses such as texts, buttons, etc. that are ready to be displayed.
export function parseResponse(action, sendMessageCallback) {
  let buttons = <></>;
  if (action?.buttons) {
    buttons = (
      <div className="bot-item d-inline-flex flex-row justify-content-start">
        {action.buttons.map(({ payload, title }) => (
          <ButtonResponse
            onClick={() => sendMessageCallback(payload)}
            title={title}
          />
        ))}
      </div>
    );
  }
  let score = <></>;
  if (action?.score) {
    score = (
      <div className="bot-response bot-item">
        <ScoreResponse score={action.score} />
      </div>
    );
  }
  let text = <></>;
  if (action?.text) {
    text = (
      <div className="d-flex flex-row align-items-start  bot-item justify-content-start">
        <TextMessage className="bot-response" text={action.text} />
        <div class="">
          <ReportButton />
        </div>
      </div>
    );
  }
  return (
    <>
      {text}
      {score}
      {buttons}
    </>
  );
}

class ReportButton extends Component {
  render() {
    return (
      <div className="">
        <button className="btn btn-sm btn-outline-danger mx-1">
          <b>REPORT</b>
        </button>
      </div>
    );
  }
}

class ButtonResponse extends Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <input
        type="button"
        className="btn btn-primary me-2"
        onClick={() => this.props.onClick()}
        value={this.props.title}
      />
    );
  }
}

class ScoreResponse extends Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div className="card">
        <div className="card-body d-flex align-items-center flex-column">
          <h5 className="card-title">Score</h5>
          <div className="card-text">
            <table className="table">
              <tbody>
                {this.props.score.individualScores.map(
                  ({ explanation, scoreAchieved, scorePossible }, index) => (
                    <tr key={index}>
                      <td>{explanation}</td>
                      <td>
                        {scoreAchieved}/{scorePossible}
                      </td>
                    </tr>
                  )
                )}
                <tr>
                  <td>Total Score</td>
                  <td>
                    {this.props.score.totalScore}/
                    {this.props.score.totalMaxScore}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );
  }
}

class Response extends Component {
  constructor(props) {
    super(props);
  }

  render() {
    let buttons = [];
    if (this.props.action.buttons) {
      buttons = this.props.action.buttons.map(({ payload, title }) => (
        <td>
          <button
            type="button"
            className="btn btn-primary btn-sm"
            onClick={(e) => this.props.sendMessage({ payload: payload })}
          >
            {title}
          </button>
        </td>
      ));
    }

    let score = <></>;
    if (this.props.action?.custom?.score) {
      score = (
        <table>
          <tbody>
            {this.props.action.custom.score.individualScores.map(
              ({ explanation, scoreAchieved, scorePossible }, index) => (
                <tr key={index}>
                  <td>{explanation}</td>
                  <td>
                    {scoreAchieved}/{scorePossible}
                  </td>
                </tr>
              )
            )}
            <tr>
              <td>Total Score</td>
              {this.props.action.custom.score.totalScore}/
              {this.props.action.custom.score.totalMaxScore}
            </tr>
          </tbody>
        </table>
      );
    }

    return (
      <tr
        className="w-100 pb-3"
        style={{
          backgroundColor: this.props.isUserMessage ? "white" : "lightgreen",
        }}
      >
        <td>{this.props.isUserMessage ? "user:\u2002" : "bot:\u2002"}</td>
        <td>{this.props.action.text}</td>
        {buttons}
        {score}
      </tr>
    );
  }
}

export default parseResponse;
